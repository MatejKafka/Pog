<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <Version>0.13.0</Version>
    <IncludeSourceRevisionInInformationalVersion>false</IncludeSourceRevisionInInformationalVersion>

    <!-- If publishing, use a release build by default. -->
    <PublishRelease>true</PublishRelease>
    <!-- This is needed for XmlDoc2CmdletDoc to generate a PowerShell documentation file. -->
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <XmlDoc2CmdletDocArguments>-ignoreOptional</XmlDoc2CmdletDocArguments>

    <LangVersion>default</LangVersion>
    <Nullable>enable</Nullable>
    <CheckForOverflowUnderflow>true</CheckForOverflowUnderflow>
    <TargetFramework>netstandard2.0</TargetFramework>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <NoWarn>1701;1702;IL2121;CS1591;CS0628</NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugType>full</DebugType>
    <!-- PowerShell does not respect the .deps.json files, so it cannot load assemblies from Nuget cache.
         To resolve the issue, copy all referenced assemblies to the `bin` dir. -->
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <Platform>AnyCPU</Platform>
    <PublishReadyToRun>false</PublishReadyToRun>
    <PublishSingleFile>false</PublishSingleFile>
    <PublishTrimmed>false</PublishTrimmed>
    <SelfContained>false</SelfContained>
  </PropertyGroup>

  <ItemGroup>
    <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
      <_Parameter1>$(AssemblyName).Tests</_Parameter1>
    </AssemblyAttribute>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Polyfills\Polyfills.csproj"/>
  </ItemGroup>

  <ItemGroup>
    <!--
    we need AsyncInterfaces 8.0.0 (and also the two packages below, which depend on it), which is what PowerShell
    currently ships - if we updated to 9.0.0, loading Pog without ILRepack would fail, as it would try to load
    9.0.0 while PowerShell already has 8.0.0 loaded; for release mode, everything is OK, since we ship our own copy
    -->
    <PackageReference Include="Microsoft.Bcl.AsyncInterfaces" Version="8.0.0"/>
    <PackageReference Include="System.Text.Json" Version="8.0.5"/>
    <PackageReference Include="System.Net.Http.Json" Version="8.0.1"/>

    <PackageReference Include="DiffPlex" Version="1.7.2"/>
    <PackageReference Include="Microsoft.Windows.CsWin32" Version="0.3.106">
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="JetBrains.Annotations" Version="2024.3.0"/>
    <PackageReference Include="Microsoft.Win32.Registry" Version="5.0.0"/>
    <!-- This would be better with PrivateAssets="all", but we cannot do that because it breaks ILRepack. -->
    <PackageReference Include="PowerShellStandard.Library" Version="7.0.0-preview.1"/>
    <PackageReference Include="System.Management" Version="9.0.0"/>
    <PackageReference Include="System.Memory" Version="4.6.0"/>
    <PackageReference Include="MatejKafka.XmlDoc2CmdletDoc" Version="0.7.0">
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <!-- Use ILRepack to combine all dependencies into one assembly for the release build. This simplifies
       loading and also shields us from dependency hell, which is especially problematic with PowerShell,
       because it seemingly ignores `<bindingRedirect>` (see https://stackoverflow.com/a/69403558/14427275). -->
  <Target Name="ILRepack" AfterTargets="Publish" Condition="'$(Configuration)' == 'Release'">
    <!-- Resolve publish dir before passing to ILRepack. -->
    <ConvertToAbsolutePath Paths="$(PublishDir)">
      <Output TaskParameter="AbsolutePaths" PropertyName="AbsPublishDir"/>
    </ConvertToAbsolutePath>

    <PropertyGroup>
      <MergedOutputPath>$(ProjectDir)\..\$(ProjectName).dll</MergedOutputPath>
      <!-- The merged assembly should be called the same as the project, even if it's later renamed,
           since the assembly remembers the compile-time name. -->
      <MergedAssembly>$(AbsPublishDir)\merged\$(ProjectName).dll</MergedAssembly>
      <MainAssembly>$(AbsPublishDir)\$(ProjectName).dll</MainAssembly>
    </PropertyGroup>

    <ItemGroup>
      <!-- Provided by the runtime. -->
      <ExcludedAssemblies Include="$(AbsPublishDir)\System.Management.Automation.dll"/>
      <!-- JetBrains annotations are not compiled into the resulting DLL. -->
      <ExcludedAssemblies Include="$(AbsPublishDir)\JetBrains.Annotations.dll"/>
      <!-- List of assemblies to be merged. -->
      <AssembliesToMerge Include="$(AbsPublishDir)\*.dll" Exclude="$(MainAssembly);$(MergedAssembly);@(ExcludedAssemblies)"/>
    </ItemGroup>

    <PropertyGroup>
      <!-- /allowdup prevents renaming the attributes to a random GUID, so that the runtime still understands them. -->
      <IlRepackFlags>
        /ndebug /union /parallel /xmldocs /illink /internalize
        /allowdup:System.Runtime.CompilerServices.*
        /allowdup:System.Diagnostics.CodeAnalysis.*
        /allowdup:Microsoft.CodeAnalysis.EmbeddedAttribute
        /allowdup:System.Runtime.InteropServices.LibraryImportAttribute
        /allowdup:System.Runtime.InteropServices.DllImportAttribute
        /allowdup:System.Runtime.InteropServices.StringMarshalling
      </IlRepackFlags>
      <!-- Cleanup whitespace. -->
      <IlRepackFlags>$([System.Text.RegularExpressions.Regex]::Replace($(IlRepackFlags), "\s+", " "))</IlRepackFlags>
      <AssemblyListArg>&quot;$(MainAssembly)&quot; @(AssembliesToMerge->'&quot;%(FullPath)&quot;', ' ')</AssemblyListArg>
    </PropertyGroup>

    <Message Text="Running ILRepack..." Importance="High"/>
    <Exec Command="ILRepack.exe $(IlRepackFlags) /out:&quot;$(MergedAssembly)&quot; $(AssemblyListArg)"
          WorkingDirectory="$(AbsPublishDir)"/>

    <!-- Copy the merged DLL and the generated PowerShell help file. This is a separate step
         to get better error messages when the output .dll is in use. -->
    <Copy SourceFiles="$(MergedAssembly)" DestinationFiles="$(MergedOutputPath)"/>
    <Copy SourceFiles="$(TargetDir)$(ProjectName).dll-Help.xml" DestinationFiles="$(MergedOutputPath)-Help.xml"/>
  </Target>

</Project>
